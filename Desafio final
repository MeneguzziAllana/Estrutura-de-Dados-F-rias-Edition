class Jogador:
  def __init__(self, numero, nome, pontos=0):
    self.numero = numero
    self.nome = nome
    self.pontos = pontos

class Node:
  def __init__(self, jogador):
    self.jogador = jogador
    self.esquerda = None
    self.direita = None

class BST:
  def __init__(self):
    self.raiz = None

  def inserir(self, jogador):
    if self.raiz is None:
      self.raiz = Node(jogador)
    else:
      self.inserir_recursivo(self.raiz, jogador)

  def inserir_recursivo(self, no_atual, jogador):
    if jogador.numero < no_atual.jogador.numero:
      if no_atual.esquerda is None:
        no_atual.esquerda = Node(jogador)
      else:
        self.inserir_recursivo(no_atual.esquerda, jogador)
    else:
      if no_atual.direita is None:
        no_atual.direita = Node(jogador)
      else:
        self.inserir_recursivo(no_atual.direita, jogador)

  def buscar(self, numero):
    return self.buscar_recursivo(self.raiz, numero)

  def buscar_recursivo(self, no_atual, numero):
    if no_atual is None:
      return None
    if no_atual.jogador.numero == numero:
      return no_atual.jogador
    elif numero < no_atual.jogador.numero:
      return self.buscar_recursivo(no_atual.esquerda, numero)
    else:
      return self.buscar_recursivo(no_atual.direita, numero)

  def buscar_pontos(self, pontos):
    return self.buscar_ponto_recursivo(self.raiz, pontos)

  def buscar_ponto_recursivo(self, no_atual, pontos):
    if no_atual is None:
      return []
    jogadores_encontrados = []
    if no_atual.jogador.pontos == pontos:
      jogadores_encontrados.append(no_atual.jogador)
    jogadores_encontrados += self.buscar_ponto_recursivo(no_atual.esquerda, pontos)
    jogadores_encontrados += self.buscar_ponto_recursivo(no_atual.direita, pontos)
    return jogadores_encontrados

  def remover(self, numero):
    self.raiz = self.remover_recursivo(self.raiz, numero)

  def remover_recursivo(self, no_atual, numero):
      if no_atual is None:
          return no_atual
      if numero < no_atual.jogador.numero:
          no_atual.esquerda = self.remover_recursivo(no_atual.esquerda, numero)
      elif numero > no_atual.jogador.numero:
          no_atual.direita = self.remover_recursivo(no_atual.direita, numero)
      else:
          if no_atual.esquerda is None:
              return no_atual.direita
          elif no_atual.direita is None:
              return no_atual.esquerda
          no_atual.jogador = self.menor_valor(no_atual.direita)
          no_atual.direita = self.remover_recursivo(no_atual.direita, no_atual.jogador.numero)
      return no_atual

  def menor_valor(self, no_atual):
    while no_atual.esquerda is not None:
      no_atual = no_atual.esquerda
    return no_atual.jogador

  def listar_ordem(self):
    jogadores = []
    self.listar_ordem_recursivo(self.raiz, jogadores)
    return jogadores

  def listar_ordem_recursivo(self, no_atual, jogadores):
    if no_atual is not None:
      self.listar_ordem_recursivo(no_atual.esquerda, jogadores)
      jogadores.append(no_atual.jogador)
      self.listar_ordem_recursivo(no_atual.direita, jogadores)

def adicionar_jogadores(arvore):
  numero = 1
  while True:
    nome = input("\nDigite o nome do jogador (ou '0' para encerrar): ")
    if nome == '0':
      break
    pontos = int(input(f"Digite a quantidade de pontos do jogador {numero}: "))
    arvore.inserir(Jogador(numero, nome, pontos))
    numero += 1

def listar_jogadores(arvore):
  jogadores_ordem = sorted(arvore.listar_ordem(), key=lambda x: x.pontos, reverse=True)
  print("\nLista de jogadores em ordem de pontos:")
  for jogador in jogadores_ordem:
    print(f"{jogador.nome} - {jogador.pontos} pontos")

def listar_jogadores_remover(arvore):
  jogadores_ordem = arvore.listar_ordem()
  print("\nLista de jogadores:")
  for jogador in jogadores_ordem:
    print(f"Jogador {jogador.numero}: {jogador.nome} - {jogador.pontos} pontos")

def remover_jogador(arvore):
  listar_jogadores_remover(arvore)
  numero = int(input("\nDigite o número do jogador a ser removido (ou '0' para cancelar): "))
  if numero == 0:
    return
  jogador_remover = arvore.buscar(numero)
  if jogador_remover:
    arvore.remover(numero)
    print(f"\n--- Jogador {jogador_remover.nome} removido com sucesso! ---")
  else:
    print("\n--- Jogador não encontrado! ---")

def buscar_jogador_ponto(arvore):
  pontos = int(input("\nDigite a quantidade de pontos para buscar jogadores: "))
  jogadores_encontrados = arvore.buscar_pontos(pontos)
  if jogadores_encontrados:
    print("\nJogadores encontrados:")
    for jogador in jogadores_encontrados:
      print(f"{jogador.nome} - {jogador.pontos} pontos")
  else:
      print("\n--- Nenhum jogador encontrado ! ---")

def main():
  arvore_jogadores = BST()

  while True:
    print("\n--- Menu ---\n\n(1) Inserir jogador\n(2) Listar jogadores em ordem de pontos\n(3) Remover jogador\n(4) Buscar jogadores por pontos\n(0) Sair")

    escolha = input("Escolha uma opção: ")

    if escolha == '1':
      adicionar_jogadores(arvore_jogadores)
    elif escolha == '2':
      listar_jogadores(arvore_jogadores)
    elif escolha == '3':
      remover_jogador(arvore_jogadores)
    elif escolha == '4':
      buscar_jogador_ponto(arvore_jogadores)
    elif escolha == '0':
      print("\n--- Saindo do programa ---")
      break
    else:
      print("\n--- Opção inválida! Tente novamente. ---")

if __name__ == "__main__":
  main()
